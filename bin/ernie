#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), *%w[.. lib]))
ERNIE_ROOT = File.join(File.dirname(__FILE__), *%w[..])

DEFAULT_ERLANG_CODEPATHS = %w[ebin]

def rel(path)
  File.join(ERNIE_ROOT, path)
end

def code_paths
  DEFAULT_ERLANG_CODEPATHS.map {|n| "-pz #{rel(n)}" }.join(" ") + " \\"
end

require 'optparse'
require 'pp'

help = <<HELP
Ernie is an Erlang/Ruby BERT-RPC Server.

Basic Command Line Usage:
  ernie [options] <path to handler file>

Options:
HELP

options = {}
OptionParser.new do |opts|
  opts.banner = help

  opts.on("-p PORT", "--port PORT", "Port") do |x|
    options[:port] = x
  end

  opts.on("-d", "--detached", "Run as a daemon") do
    options[:detached] = true
  end

  opts.on("-P", "--pidfile PIDFILE", "Location to write pid file.") do |x|
    options[:pidfile] = x
  end
end.parse!

handler = ARGV[0]

unless handler
  puts "A handler must be specified: ernie /path/to/handler.rb"
  exit(1)
end

port = options[:port] || 8000
pidfile = options[:pidfile] ? "-ernie_server_app pidfile \"'#{options[:pidfile]}'\"" : ''
detached = options[:detached] ? '-detached' : ''

cmd = %Q{erl -boot start_sasl \
             #{detached} \
             +Bc \
             +K true \
             -smp enable \
             #{code_paths}
             #{pidfile} \
             -ernie_server_app port #{port} \
             -ernie_server_app handler '"#{handler}"' \
             -run ernie_server_app boot}.squeeze(' ')
puts cmd
exec(cmd)